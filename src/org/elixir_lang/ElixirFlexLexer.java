/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.Level;
import org.elixir_lang.file.LevelPropertyPusher;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ADDITION_OR_KEYWORD_PAIR_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE = 2;
  public static final int ADDITION_OR_SUBTRACTION_MAYBE = 4;
  public static final int ADDITION_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE = 6;
  public static final int AFTER_IDENTIFIER_WHITE_SPACE = 8;
  public static final int AFTER_RELATIVE_IDENTIFIER = 10;
  public static final int AFTER_UNQUALIFIED_IDENTIFIER = 12;
  public static final int ATOM_START = 14;
  public static final int BASE_WHOLE_NUMBER_BASE = 16;
  public static final int BINARY_WHOLE_NUMBER = 18;
  public static final int CALL_MAYBE = 20;
  public static final int CHAR_TOKENIZATION = 22;
  public static final int DECIMAL_EXPONENT = 24;
  public static final int DECIMAL_EXPONENT_SIGN = 26;
  public static final int DECIMAL_FRACTION = 28;
  public static final int DECIMAL_WHOLE_NUMBER = 30;
  public static final int DOT_OPERATION = 32;
  public static final int ESCAPE_IN_LITERAL_GROUP = 34;
  public static final int ESCAPE_SEQUENCE = 36;
  public static final int EXTENDED_HEXADECIMAL_ESCAPE_SEQUENCE = 38;
  public static final int GROUP = 40;
  public static final int GROUP_HEREDOC_END = 42;
  public static final int GROUP_HEREDOC_LINE_BODY = 44;
  public static final int GROUP_HEREDOC_LINE_ESCAPED_EOL = 46;
  public static final int GROUP_HEREDOC_LINE_START = 48;
  public static final int GROUP_HEREDOC_START = 50;
  public static final int HEXADECIMAL_ESCAPE_SEQUENCE = 52;
  public static final int HEXADECIMAL_WHOLE_NUMBER = 54;
  public static final int INTERPOLATION = 56;
  public static final int KEYWORD_PAIR_MAYBE = 58;
  public static final int KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE = 60;
  public static final int LAST_EOL = 62;
  public static final int MULTILINE_WHITE_SPACE_MAYBE = 64;
  public static final int NAMED_SIGIL = 66;
  public static final int OCTAL_WHOLE_NUMBER = 68;
  public static final int REFERENCE_OPERATION = 70;
  public static final int SIGIL = 72;
  public static final int SIGIL_MODIFIERS = 74;
  public static final int UNICODE_ESCAPE_SEQUENCE = 76;
  public static final int UNKNOWN_BASE_WHOLE_NUMBER = 78;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\53\1\51\1\76\1\54\1\52\22\0\1\53\1\16\1\75\1\55\1\0\1\20\1\11\1\74"+
    "\1\73\1\72\1\35\1\30\1\46\1\25\1\24\1\33\1\57\1\62\6\65\2\37\1\31\1\50\1\3"+
    "\1\17\1\4\1\36\1\32\1\47\1\61\2\47\1\67\1\47\21\56\1\64\2\56\1\71\1\26\1\70"+
    "\1\21\1\40\1\0\1\12\1\60\1\42\1\13\1\7\1\41\1\66\1\6\1\34\2\66\1\43\1\66\1"+
    "\10\1\22\2\66\1\27\1\44\1\23\1\45\1\66\1\5\1\63\2\66\1\1\1\15\1\2\1\14\6\0"+
    "\1\76\242\0\2\76\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\57\0\1\1\1\2\1\3\2\4\4\5\1\6\2\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\11\2\5\1\14"+
    "\1\15\1\1\1\5\1\16\1\17\1\20\1\21\1\5"+
    "\1\22\1\23\1\24\2\5\1\25\1\26\1\27\1\30"+
    "\1\0\1\31\1\32\1\24\1\33\1\34\1\35\1\36"+
    "\2\37\3\40\1\41\1\40\1\42\1\43\2\40\1\44"+
    "\1\45\1\1\4\46\1\1\7\46\1\1\1\46\1\1"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\56\2\71\4\72\1\73\2\72"+
    "\1\40\1\74\1\75\1\76\1\77\1\75\2\72\1\40"+
    "\1\100\1\40\1\72\1\101\1\102\1\103\1\72\1\104"+
    "\2\72\1\31\1\0\2\105\1\106\1\107\1\0\1\110"+
    "\1\111\1\112\1\0\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\116\2\0\1\121\1\122\1\0\1\123\1\0"+
    "\1\124\1\125\2\124\1\126\1\0\2\1\1\127\1\130"+
    "\1\131\1\115\1\132\1\40\1\133\1\40\1\134\1\0"+
    "\1\135\1\0\2\135\1\136\1\137\1\0\1\140\1\30"+
    "\1\0\1\31\1\141\1\142\1\130\1\143\60\0\1\144"+
    "\1\145\1\146\1\0\1\4\1\147\1\150\2\0\1\151"+
    "\2\5\2\0\4\5\1\152\2\5\1\153\1\0\1\146"+
    "\1\154\1\155\1\156\1\155\2\0\1\157\1\5\1\160"+
    "\1\161\1\0\1\31\1\0\1\5\1\0\1\162\1\163"+
    "\1\164\1\165\2\5\1\26\1\0\3\166\4\167\1\0"+
    "\2\167\1\0\1\166\1\0\1\166\2\0\1\167\1\166"+
    "\5\0\1\166\1\167\2\0\3\166\5\0\1\166\1\0"+
    "\1\166\2\0\1\166\5\0\1\170\2\0\1\41\1\0"+
    "\1\171\1\172\1\173\2\0\1\174\1\0\1\175\2\0"+
    "\1\176\2\0\1\46\1\0\1\46\1\0\2\46\2\0"+
    "\1\46\1\177\1\0\1\200\1\201\1\0\1\71\1\202"+
    "\5\72\1\203\2\72\1\204\1\0\1\201\1\205\2\206"+
    "\1\0\1\207\1\72\1\210\1\211\1\72\1\212\2\72"+
    "\3\0\1\115\1\213\1\214\1\0\1\215\2\0\1\216"+
    "\7\0\1\130\2\0\1\217\2\0\1\31\1\0\1\130"+
    "\55\0\1\5\1\220\1\0\1\221\1\5\1\222\1\223"+
    "\1\152\1\224\1\5\1\11\1\154\1\0\1\225\2\5"+
    "\1\226\1\0\1\5\1\227\1\230\2\5\1\231\1\166"+
    "\1\0\1\232\1\0\1\166\4\167\1\166\1\167\1\166"+
    "\1\0\2\166\1\0\3\166\1\0\1\166\3\0\3\166"+
    "\2\0\1\233\1\72\1\234\1\72\1\235\1\203\1\236"+
    "\1\72\1\75\1\205\1\237\4\72\1\240\1\115\1\241"+
    "\2\0\1\242\1\243\1\244\16\0\1\245\1\0\1\246"+
    "\1\247\1\5\1\0\1\250\3\5\1\0\2\167\1\251"+
    "\1\252\1\253\1\72\1\254\3\72\1\115\1\255\2\0"+
    "\1\256\1\257\1\5\1\260\1\261\1\262\1\72\1\263"+
    "\1\264\1\115\1\265\1\266\1\267\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0b91\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11b8\0\u11f7\0\u11b8\0\u0b91\0\u1236\0\u1275"+
    "\0\u12b4\0\u0b91\0\u12f3\0\u0b91\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u0b91\0\u0b91\0\u0b91\0\u0b91\0\u146d\0\u14ac\0\u0b91"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u0b91\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u0b91\0\u0b91\0\u0b91\0\u0b91\0\u0b91\0\u0b91"+
    "\0\u0b91\0\u0b91\0\u0b91\0\u1b12\0\u0b91\0\u1b51\0\u0b91\0\u0b91"+
    "\0\u1b90\0\u1bcf\0\u0b91\0\u0b91\0\u1b90\0\u1c0e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u0b91\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u0b91\0\u0b91\0\u2178\0\u0b91"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u0b91\0\u0b91"+
    "\0\u2331\0\u0b91\0\u0b91\0\u0b91\0\u2370\0\u0b91\0\u0b91\0\u23af"+
    "\0\u0b91\0\u0b91\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u0b91"+
    "\0\u2529\0\u0b91\0\u2568\0\u0b91\0\u25a7\0\u25e6\0\u2625\0\u0b91"+
    "\0\u2664\0\u26a3\0\u26e2\0\u0b91\0\u2721\0\u2760\0\u279f\0\u0b91"+
    "\0\u27de\0\u281d\0\u285c\0\u0b91\0\u289b\0\u0b91\0\u28da\0\u2919"+
    "\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u0b91\0\u0b91\0\u2a54\0\u2a93"+
    "\0\u0b91\0\u0b91\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u0b91"+
    "\0\u2ffd\0\u303c\0\u307b\0\u0a17\0\u30ba\0\u0b52\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u11b8\0\u3663\0\u36a2"+
    "\0\u11b8\0\u11b8\0\u0b91\0\u11b8\0\u36e1\0\u36a2\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957"+
    "\0\u3996\0\u0ccc\0\u39d5\0\u11b8\0\u3a14\0\u3a53\0\u11b8\0\u11b8"+
    "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u11b8\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u0b91\0\u3b10\0\u0ccc\0\u3d47"+
    "\0\u3d86\0\u375f\0\u3dc5\0\u0b91\0\u3e04\0\u3e43\0\u3e82\0\u3ec1"+
    "\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9"+
    "\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1"+
    "\0\u42f0\0\u432f\0\u432f\0\u436e\0\u1332\0\u43ad\0\u43ec\0\u442b"+
    "\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623"+
    "\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b"+
    "\0\u485a\0\u0b91\0\u4899\0\u48d8\0\u0b91\0\u4917\0\u0b91\0\u0b91"+
    "\0\u0b91\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u0b91\0\u4a52\0\u4a91"+
    "\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a"+
    "\0\u4c89\0\u1722\0\u4cc8\0\u4d07\0\u1c0e\0\u4d46\0\u0b91\0\u4d85"+
    "\0\u4d85\0\u0b91\0\u0b91\0\u4dc4\0\u0b91\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u1d0a\0\u4f7d\0\u0b91\0\u4fbc\0\u4ffb"+
    "\0\u0b91\0\u503a\0\u1d0a\0\u5079\0\u50b8\0\u0b91\0\u50f7\0\u1d0a"+
    "\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u0b91\0\u0b91"+
    "\0\u52b0\0\u0b91\0\u52ef\0\u532e\0\u0b91\0\u536d\0\u53ac\0\u53eb"+
    "\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u0b91\0\u285c\0\u27de\0\u5526"+
    "\0\u5565\0\u55a4\0\u0b91\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56a0"+
    "\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898"+
    "\0\u58d7\0\u5916\0\u5955\0\u5994\0\u5955\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49"+
    "\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u0b91\0\u5d84\0\u5dc3\0\u5e02"+
    "\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa"+
    "\0\u6039\0\u6078\0\u60b7\0\u0b91\0\u375f\0\u0ccc\0\u60f6\0\u3b10"+
    "\0\u0ccc\0\u11b8\0\u3b10\0\u6135\0\u11b8\0\u11b8\0\u6174\0\u11b8"+
    "\0\u61b3\0\u61f2\0\u0b91\0\u3c0c\0\u6231\0\u0b91\0\u0b91\0\u6270"+
    "\0\u62af\0\u62ee\0\u632d\0\u636c\0\u0b91\0\u63ab\0\u636c\0\u63ea"+
    "\0\u0b91\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u3ec1\0\u6525\0\u6564"+
    "\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de\0\u671d\0\u671d"+
    "\0\u675c\0\u679b\0\u67da\0\u6819\0\u6858\0\u6897\0\u68d6\0\u0b91"+
    "\0\u6915\0\u1d0a\0\u6954\0\u1d0a\0\u0b91\0\u1d0a\0\u6993\0\u0b91"+
    "\0\u0b91\0\u0b91\0\u69d2\0\u6a11\0\u6a50\0\u6a8f\0\u0b91\0\u6ace"+
    "\0\u0b91\0\u6b0d\0\u6b4c\0\u0b91\0\u0b91\0\u0b91\0\u6b8b\0\u6bca"+
    "\0\u6c09\0\u6c48\0\u6c09\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83"+
    "\0\u6dc2\0\u6e01\0\u6e40\0\u5ffa\0\u0b91\0\u6e7f\0\u3b10\0\u0ccc"+
    "\0\u6ebe\0\u6efd\0\u0ccc\0\u6f3c\0\u6f7b\0\u6fba\0\u6ff9\0\u6621"+
    "\0\u432f\0\u0b91\0\u1d0a\0\u1d0a\0\u7038\0\u1d0a\0\u7077\0\u70b6"+
    "\0\u70f5\0\u7134\0\u0b91\0\u7173\0\u71b2\0\u0ccc\0\u0b91\0\u71f1"+
    "\0\u0ccc\0\u0ccc\0\u1d0a\0\u7230\0\u1d0a\0\u1d0a\0\u726f\0\u0b91"+
    "\0\u0ccc\0\u1d0a\0\u0b91";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\66\1\120\1\121\3\66\1\122\1\123\1\124\1\125"+
    "\1\126\2\127\1\130\1\123\1\131\1\66\1\123\1\117"+
    "\1\66\1\123\1\117\1\66\1\123\1\132\1\133\1\134"+
    "\1\135\1\136\1\137\1\0\26\140\1\141\2\140\1\142"+
    "\21\140\2\143\25\140\1\144\21\140\1\145\1\141\1\140"+
    "\1\146\22\140\2\143\47\140\1\147\2\140\1\150\51\140"+
    "\1\144\21\140\1\145\2\140\1\146\1\142\21\140\2\151"+
    "\14\140\1\152\1\140\1\152\6\140\1\144\21\140\1\145"+
    "\2\140\1\146\22\140\2\151\14\140\1\152\1\140\1\152"+
    "\3\140\1\60\1\153\1\60\1\154\1\155\4\156\1\157"+
    "\2\156\1\160\1\161\1\162\1\163\1\164\1\165\2\156"+
    "\1\166\1\167\1\170\1\156\1\171\1\172\2\173\1\156"+
    "\1\173\2\60\6\156\1\60\1\156\1\60\2\0\1\60"+
    "\1\0\1\60\1\156\1\60\2\156\1\60\2\156\1\60"+
    "\2\156\4\60\2\174\6\0\4\175\1\0\2\175\6\0"+
    "\1\176\1\175\3\0\1\175\4\0\1\175\4\0\5\175"+
    "\1\0\1\175\6\0\1\175\1\0\1\177\1\200\1\0"+
    "\1\201\1\202\1\0\2\175\7\0\5\203\4\204\1\203"+
    "\2\204\6\203\2\204\3\203\1\204\4\203\1\204\2\203"+
    "\1\204\1\205\5\204\1\203\1\204\6\203\1\204\1\206"+
    "\2\204\1\206\5\204\7\203\3\140\1\144\21\140\1\145"+
    "\1\141\1\140\1\146\22\140\2\143\14\140\1\152\1\140"+
    "\1\152\3\140\26\207\1\210\50\207\5\203\4\211\1\203"+
    "\2\211\6\203\2\211\3\203\1\211\4\203\1\211\2\203"+
    "\1\212\1\205\5\211\1\203\1\211\6\203\1\211\1\212"+
    "\2\211\1\212\2\211\1\212\2\211\7\203\25\213\1\214"+
    "\2\213\1\214\46\213\5\203\2\211\1\215\1\211\1\203"+
    "\2\211\6\203\2\211\3\203\1\211\4\203\1\211\2\203"+
    "\1\212\1\205\5\211\1\203\1\211\6\203\1\211\1\212"+
    "\2\211\1\212\2\211\1\212\1\211\1\215\14\203\4\211"+
    "\1\203\2\211\6\203\2\211\1\216\2\203\1\211\4\203"+
    "\1\211\2\203\1\212\1\205\5\211\1\203\1\211\6\203"+
    "\1\211\1\212\2\211\1\212\2\211\1\212\2\211\7\203"+
    "\3\140\1\217\1\220\1\221\1\222\1\223\1\224\1\225"+
    "\1\226\1\227\1\230\1\231\1\232\1\233\1\234\1\235"+
    "\1\236\1\237\1\240\1\241\1\242\1\243\1\244\1\140"+
    "\1\245\1\246\1\247\1\250\2\140\1\222\1\251\1\252"+
    "\3\222\3\140\1\253\1\254\2\253\1\130\2\140\1\222"+
    "\2\140\1\222\2\140\1\222\5\140\1\255\1\256\1\0"+
    "\51\257\1\260\1\261\1\257\1\0\21\257\1\0\45\262"+
    "\1\263\3\262\1\264\1\265\1\262\1\0\6\262\1\266"+
    "\12\262\1\0\2\60\1\267\4\60\1\270\2\60\2\270"+
    "\23\60\1\270\1\60\2\270\4\60\1\270\1\60\2\0"+
    "\1\60\1\0\2\60\4\270\2\60\1\270\1\60\1\270"+
    "\6\60\1\0\2\271\1\272\1\271\1\272\10\271\1\272"+
    "\10\271\1\273\4\271\1\272\21\271\1\274\12\271\1\272"+
    "\1\271\1\272\1\271\2\272\1\271\74\0\1\275\1\276"+
    "\1\0\26\271\1\277\22\271\1\300\1\301\1\271\1\0"+
    "\1\274\20\271\52\0\1\302\1\303\24\0\53\304\2\305"+
    "\17\304\1\306\1\307\1\304\51\60\1\310\1\311\1\60"+
    "\1\0\17\60\1\312\1\313\1\0\1\140\1\314\5\140"+
    "\1\315\2\140\2\315\23\140\1\315\1\140\2\315\4\140"+
    "\1\315\7\140\4\315\2\140\1\315\1\140\1\315\7\140"+
    "\5\203\2\316\1\317\1\316\1\203\2\317\6\203\2\316"+
    "\3\203\1\316\4\203\1\316\2\203\1\317\1\205\2\317"+
    "\3\316\1\203\1\317\6\203\1\316\4\317\2\316\1\317"+
    "\1\316\1\317\7\203\1\60\1\61\1\320\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\66\1\120\1\121\3\66\1\122"+
    "\1\123\1\124\1\125\1\126\2\127\1\130\1\123\1\131"+
    "\1\66\1\123\1\117\1\66\1\123\1\117\1\66\1\123"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\1\0\31\140"+
    "\1\142\73\140\1\321\2\140\1\142\17\140\1\322\1\323"+
    "\2\322\1\130\21\140\51\0\1\324\1\325\24\0\26\140"+
    "\1\321\22\140\1\322\1\323\2\322\1\130\21\140\1\60"+
    "\1\326\1\60\1\326\11\60\1\326\15\60\1\326\16\60"+
    "\1\327\1\60\1\0\14\60\1\326\1\60\1\326\1\330"+
    "\1\331\1\0\5\203\4\332\1\203\2\332\6\203\2\332"+
    "\3\203\1\332\4\203\1\332\2\203\1\332\1\205\5\332"+
    "\1\203\1\332\6\203\1\332\1\333\2\332\1\333\2\332"+
    "\1\333\2\332\7\203\26\0\1\334\4\0\1\335\15\0"+
    "\1\336\1\337\2\340\22\0\5\60\4\341\1\60\2\341"+
    "\6\60\2\341\3\60\1\341\4\60\1\341\4\60\5\341"+
    "\1\60\1\341\2\60\1\327\1\60\1\0\1\60\1\341"+
    "\1\60\2\341\1\60\2\341\1\60\2\341\6\60\1\0"+
    "\5\203\4\342\1\203\2\342\6\203\2\342\3\203\1\342"+
    "\4\203\1\342\4\203\5\342\1\203\1\342\6\203\1\342"+
    "\1\203\2\342\1\203\2\342\1\203\2\342\7\203\1\140"+
    "\1\314\5\140\1\343\2\140\2\343\23\140\1\343\1\140"+
    "\2\343\4\140\1\343\7\140\4\343\2\140\1\343\1\140"+
    "\1\343\7\140\5\203\4\344\1\203\2\344\6\203\2\344"+
    "\3\203\1\344\4\203\1\344\2\203\1\344\1\203\5\344"+
    "\1\203\1\344\6\203\12\344\7\203\1\0\1\345\1\0"+
    "\1\346\1\347\1\350\2\0\1\351\1\352\1\353\1\0"+
    "\1\354\1\355\1\356\1\357\1\360\1\361\1\362\1\0"+
    "\1\363\1\364\1\365\1\0\1\366\1\367\2\370\1\371"+
    "\1\370\74\0\1\372\71\0\1\373\22\0\1\374\1\375"+
    "\2\374\22\0\2\57\1\376\1\377\1\u0100\3\57\1\u0101"+
    "\1\u0102\1\57\1\u0103\1\u0104\1\u0105\1\57\1\u0106\1\57"+
    "\1\u0107\1\u0108\1\57\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d"+
    "\1\u010e\1\57\1\376\1\57\1\376\12\57\1\376\2\0"+
    "\2\57\1\376\12\57\1\376\1\57\1\376\4\57\26\0"+
    "\1\u010f\22\0\1\374\1\375\2\54\55\0\1\u0110\50\0"+
    "\4\u0111\1\0\2\u0111\2\0\1\u0112\3\0\2\u0111\1\u0113"+
    "\2\0\1\u0111\4\0\1\u0111\1\0\2\u0112\6\u0111\1\0"+
    "\1\u0112\6\0\2\u0112\1\u0111\2\u0112\1\u0111\2\u0112\1\u0111"+
    "\1\u0112\7\0\51\57\2\0\2\57\1\376\21\57\101\0"+
    "\1\u0114\77\0\1\u0115\1\u0116\7\0\1\u0117\1\u0118\1\0"+
    "\1\u0119\5\0\1\u011a\5\0\1\u011b\15\0\1\u011c\1\u011d"+
    "\2\u011c\26\0\1\u011e\12\0\1\u0119\13\0\1\u011b\15\0"+
    "\1\u011c\1\u011d\2\u011c\27\0\1\66\1\u011f\2\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\14\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66\6\0"+
    "\12\66\14\0\3\66\1\u0123\1\0\2\66\2\0\1\u0120"+
    "\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122\1\0"+
    "\1\66\1\0\1\u0120\4\66\1\u0124\2\66\1\0\1\66"+
    "\6\0\12\66\14\0\4\66\1\0\2\66\2\0\1\u0120"+
    "\3\0\1\u0125\1\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\u0126\1\0\1\u0120\7\66\1\0\1\66\6\0"+
    "\12\66\20\0\1\u0127\21\0\1\u011b\15\0\1\u011c\1\u011d"+
    "\2\u011c\27\0\3\66\1\u0128\1\0\2\66\2\0\1\u0120"+
    "\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122\1\0"+
    "\1\66\1\0\1\u0120\2\66\1\u0129\4\66\1\0\1\66"+
    "\6\0\12\66\14\0\4\66\1\0\2\66\2\0\1\u0120"+
    "\3\0\1\u012a\1\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66\6\0"+
    "\12\66\13\0\1\u0117\7\0\1\u012b\66\0\1\u012c\10\0"+
    "\1\u012d\15\0\1\u011b\15\0\1\u011c\1\u011d\2\u011c\41\0"+
    "\1\u012e\13\0\1\u011b\15\0\1\u011c\1\u011d\2\u011c\26\0"+
    "\1\u012f\7\0\1\u0130\2\0\1\u012e\13\0\1\u011b\15\0"+
    "\1\u011c\1\u011d\2\u011c\23\0\1\u0131\116\0\1\u0132\11\0"+
    "\1\u011b\15\0\1\u011c\1\u011d\2\u011c\27\0\4\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\u0133\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\14\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\u0134\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66\6\0"+
    "\12\66\33\0\1\u0135\56\0\1\u0136\20\0\1\u0116\3\0"+
    "\1\u0137\1\0\1\u011b\15\0\1\u011c\1\u011d\2\u011c\50\0"+
    "\1\u011a\22\0\1\u0138\1\u0139\31\0\2\66\1\u013a\1\66"+
    "\1\0\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66"+
    "\1\0\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66"+
    "\1\0\1\66\6\0\12\66\37\0\1\u0116\1\u013b\1\0"+
    "\1\u011b\15\0\1\u011c\1\u011d\2\u011c\53\0\1\u013c\17\0"+
    "\3\u013d\56\0\1\u011b\15\0\1\u011c\1\u011d\2\u011c\27\0"+
    "\3\66\1\u013e\1\0\2\66\2\0\1\u0120\3\0\2\66"+
    "\3\0\1\66\1\0\1\u0121\1\u0122\1\0\1\66\1\0"+
    "\1\u0120\7\66\1\0\1\66\6\0\12\66\46\0\1\117"+
    "\17\0\1\117\2\0\1\117\2\0\1\117\16\0\3\66"+
    "\1\u013f\1\0\1\u0140\1\66\2\0\1\u0120\3\0\2\66"+
    "\3\0\1\66\1\0\1\u0121\1\u0122\1\0\1\66\1\0"+
    "\1\u0120\7\66\1\0\1\66\6\0\12\66\14\0\4\66"+
    "\1\0\1\u0141\1\66\2\0\1\u0120\3\0\2\66\3\0"+
    "\1\66\1\0\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120"+
    "\7\66\1\0\1\66\6\0\12\66\14\0\4\123\1\0"+
    "\2\123\2\0\1\u0142\3\0\2\123\3\0\1\123\1\0"+
    "\1\u0121\1\u0122\1\0\1\123\1\0\1\u0142\7\123\1\0"+
    "\1\123\6\0\12\123\10\0\1\u0143\1\u0144\1\u0145\1\u0146"+
    "\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b\1\u014c\1\u014d\1\u014e"+
    "\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u0148\1\u0155"+
    "\1\u0156\1\u0157\1\u0148\1\u0158\1\u0159\1\u015a\1\u015b\1\u015c"+
    "\1\u015b\2\0\6\u0148\2\0\1\u0144\1\u015d\1\u015e\2\u015d"+
    "\1\u015f\2\0\1\u0148\2\0\1\u0148\2\0\1\u0148\1\0"+
    "\1\u0144\1\0\1\u0144\55\0\1\125\27\0\1\u0144\1\u0160"+
    "\1\u0161\1\u0162\1\0\1\u0163\1\0\1\u0164\1\u0163\1\u0165"+
    "\1\u0166\1\u0167\1\u0168\1\u0169\1\0\1\u016a\1\u016b\1\0"+
    "\1\u016c\1\u016d\1\u016e\1\0\1\u016f\1\u0170\1\0\1\u0144"+
    "\1\u0171\1\u0144\12\0\1\u0144\1\u015d\1\u015e\2\127\1\u015f"+
    "\12\0\1\u0144\1\0\1\u0144\4\0\51\130\2\0\24\130"+
    "\5\0\4\u0172\1\0\2\u0172\6\0\2\u0172\3\0\1\u0172"+
    "\4\0\1\u0172\2\0\1\117\1\0\5\u0172\1\0\1\u0172"+
    "\6\0\1\u0172\1\117\2\u0172\1\117\2\u0172\1\117\2\u0172"+
    "\103\0\1\u0173\77\0\1\u0174\52\0\1\u0175\1\u0176\75\0"+
    "\3\u0177\76\0\2\143\26\0\1\u0178\76\0\1\140\20\0"+
    "\1\u0178\101\0\1\u0178\47\0\1\u0179\1\0\1\u017a\14\0"+
    "\1\u0179\5\0\1\u017b\1\0\1\u0179\20\0\1\u017c\1\u017d"+
    "\2\u017c\14\0\1\u0179\1\0\1\u0179\4\0\1\u017e\1\0"+
    "\1\u017f\14\0\1\u017e\4\0\1\u017e\1\u0180\22\0\1\u0181"+
    "\1\u0182\2\u0181\14\0\1\u017e\1\0\1\u017e\56\0\2\151"+
    "\24\0\1\173\77\0\1\u0183\1\173\7\0\1\u0184\1\u0185"+
    "\1\0\1\173\5\0\1\173\55\0\1\u0185\12\0\1\173"+
    "\64\0\4\156\1\0\2\156\2\0\1\173\3\0\2\156"+
    "\3\0\1\156\2\0\1\156\1\0\1\156\1\0\1\173"+
    "\7\156\1\0\1\156\6\0\12\156\20\0\1\u0186\71\0"+
    "\1\u0184\7\0\1\u0187\66\0\1\173\10\0\1\u0188\100\0"+
    "\1\u0189\63\0\1\173\7\0\1\173\2\0\1\u0189\60\0"+
    "\1\u018a\116\0\1\u018b\101\0\1\u018c\56\0\1\173\20\0"+
    "\1\173\77\0\1\173\100\0\1\173\77\0\1\173\52\0"+
    "\4\204\1\0\2\204\6\0\2\204\3\0\1\204\4\0"+
    "\1\204\2\0\1\204\1\0\5\204\1\0\1\204\6\0"+
    "\1\204\1\0\2\204\1\0\5\204\66\0\1\206\2\0"+
    "\1\206\21\0\4\211\1\0\2\211\6\0\2\211\3\0"+
    "\1\211\4\0\1\211\4\0\5\211\1\0\1\211\6\0"+
    "\1\211\1\0\2\211\1\0\2\211\1\0\2\211\46\0"+
    "\1\212\17\0\1\212\2\0\1\212\2\0\1\212\50\0"+
    "\1\u018d\17\0\1\u018d\2\0\1\u018d\2\0\1\u018d\14\0"+
    "\1\u018e\1\u018f\7\0\1\u0190\1\u0191\1\0\1\u0192\5\0"+
    "\1\u0193\55\0\1\u0191\12\0\1\u0192\64\0\1\222\1\u0194"+
    "\2\222\1\0\2\222\2\0\1\u0195\3\0\2\222\3\0"+
    "\1\222\4\0\1\222\1\0\1\u0195\7\222\1\0\1\222"+
    "\6\0\12\222\14\0\4\222\1\0\2\222\2\0\1\u0195"+
    "\3\0\2\222\3\0\1\222\4\0\1\222\1\0\1\u0195"+
    "\7\222\1\0\1\222\6\0\12\222\14\0\3\222\1\u0196"+
    "\1\0\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222"+
    "\4\0\1\222\1\0\1\u0195\4\222\1\u0197\2\222\1\0"+
    "\1\222\6\0\12\222\14\0\4\222\1\0\2\222\2\0"+
    "\1\u0195\3\0\2\222\3\0\1\222\4\0\1\u0198\1\0"+
    "\1\u0195\7\222\1\0\1\222\6\0\12\222\20\0\1\u0199"+
    "\72\0\3\222\1\u019a\1\0\2\222\2\0\1\u0195\3\0"+
    "\2\222\3\0\1\222\4\0\1\222\1\0\1\u0195\2\222"+
    "\1\u019b\4\222\1\0\1\222\6\0\12\222\14\0\4\222"+
    "\1\0\2\222\2\0\1\u0195\3\0\1\u019c\1\222\3\0"+
    "\1\222\4\0\1\222\1\0\1\u0195\7\222\1\0\1\222"+
    "\6\0\12\222\13\0\1\u0190\7\0\1\u019d\66\0\1\u019e"+
    "\10\0\1\u019f\100\0\1\u01a0\73\0\1\u01a1\2\0\1\u01a0"+
    "\100\0\1\u01a2\62\0\4\222\1\0\2\222\2\0\1\u0195"+
    "\3\0\2\222\3\0\1\u01a3\4\0\1\222\1\0\1\u0195"+
    "\7\222\1\0\1\222\6\0\12\222\14\0\4\222\1\0"+
    "\2\222\2\0\1\u0195\3\0\2\222\3\0\1\u01a4\4\0"+
    "\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222"+
    "\33\0\1\u01a5\56\0\1\u01a6\20\0\1\u018f\77\0\1\u0193"+
    "\22\0\1\253\1\254\31\0\2\222\1\u01a7\1\222\1\0"+
    "\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222\4\0"+
    "\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222"+
    "\37\0\1\u018f\53\0\3\222\1\u01a8\1\0\2\222\2\0"+
    "\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222\1\0"+
    "\1\u0195\7\222\1\0\1\222\6\0\12\222\14\0\4\222"+
    "\1\0\1\u01a9\1\222\2\0\1\u0195\3\0\2\222\3\0"+
    "\1\222\4\0\1\222\1\0\1\u0195\7\222\1\0\1\222"+
    "\6\0\12\222\14\0\4\222\1\0\1\u01aa\1\222\2\0"+
    "\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222\1\0"+
    "\1\u0195\7\222\1\0\1\222\6\0\12\222\35\0\1\u01ab"+
    "\22\0\1\253\1\254\2\253\73\0\1\253\121\0\1\u01ac"+
    "\77\0\1\u01ad\52\0\1\260\76\0\1\264\34\0\1\u01ae"+
    "\2\0\2\u01ae\23\0\1\u01ae\1\0\2\u01ae\4\0\1\u01ae"+
    "\7\0\4\u01ae\2\0\1\u01ae\1\0\1\u01ae\11\0\1\u01af"+
    "\1\0\1\u01af\10\0\1\u01af\15\0\1\u01af\15\0\1\u01b0"+
    "\1\u01b1\15\0\1\u01af\1\0\1\u01af\1\0\2\u01af\2\0"+
    "\1\u01b2\171\0\1\u01b3\77\0\1\u01b4\52\0\1\u01b5\1\u01b6"+
    "\75\0\1\300\76\0\1\302\100\0\2\305\17\0\1\u01b7"+
    "\1\u01b8\75\0\1\u01b9\77\0\1\u01ba\52\0\1\310\121\0"+
    "\1\u01bb\77\0\1\u01bc\10\0\1\u01bd\2\0\2\u01bd\23\0"+
    "\1\u01bd\1\0\2\u01bd\4\0\1\u01bd\7\0\4\u01bd\2\0"+
    "\1\u01bd\1\0\1\u01bd\14\0\2\316\1\0\1\316\11\0"+
    "\2\316\3\0\1\316\4\0\1\316\6\0\3\316\10\0"+
    "\1\316\4\0\2\316\1\0\1\316\17\0\1\317\2\0"+
    "\2\317\23\0\1\317\1\0\2\317\4\0\1\317\7\0"+
    "\4\317\2\0\1\317\1\0\1\317\60\0\1\322\1\u01be"+
    "\52\0\1\u01bf\22\0\1\322\1\u01be\2\322\1\u01c0\72\0"+
    "\1\322\76\0\1\324\76\0\1\60\121\0\1\u01c1\77\0"+
    "\1\u01c2\6\0\4\332\1\0\2\332\6\0\2\332\3\0"+
    "\1\332\4\0\1\332\2\0\1\332\1\0\5\332\1\0"+
    "\1\332\6\0\1\332\1\0\2\332\1\0\2\332\1\0"+
    "\2\332\66\0\1\333\2\0\1\333\2\0\1\333\62\0"+
    "\1\u01c3\1\u01c4\75\0\1\336\100\0\2\340\31\0\1\u01c5"+
    "\2\0\2\u01c5\23\0\1\u01c5\1\0\2\u01c5\4\0\1\u01c5"+
    "\7\0\4\u01c5\2\0\1\u01c5\1\0\1\u01c5\14\0\4\344"+
    "\1\0\2\344\6\0\2\344\3\0\1\344\4\0\1\344"+
    "\2\0\1\344\1\0\5\344\1\0\1\344\6\0\12\344"+
    "\11\0\1\370\77\0\1\u01c6\1\370\7\0\1\u01c7\1\u01c8"+
    "\1\0\1\370\5\0\1\370\55\0\1\u01c8\12\0\1\370"+
    "\65\0\1\u01c9\112\0\1\u01ca\65\0\1\u01cb\75\0\1\u01cc"+
    "\72\0\1\u01c7\7\0\1\u01cd\66\0\1\370\10\0\1\u01ce"+
    "\100\0\1\u01cf\63\0\1\370\7\0\1\370\2\0\1\u01cf"+
    "\60\0\1\345\116\0\1\u01d0\104\0\1\370\73\0\1\u01d1"+
    "\56\0\1\370\20\0\1\370\77\0\1\370\100\0\1\370"+
    "\77\0\1\370\55\0\1\370\137\0\1\u01d2\1\0\2\372"+
    "\73\0\1\374\1\375\75\0\1\374\25\0\3\57\1\u01d3"+
    "\45\57\2\0\2\57\1\376\24\57\1\376\1\u01d4\7\57"+
    "\2\u01d5\1\57\1\376\5\57\1\376\23\57\2\0\2\57"+
    "\1\376\30\57\1\u01d6\24\57\1\376\14\57\2\0\2\57"+
    "\1\376\32\57\1\u01d7\37\57\2\0\2\57\1\376\31\57"+
    "\1\u01d8\40\57\2\0\2\57\1\376\24\57\1\u01d5\13\57"+
    "\1\376\31\57\2\0\2\57\1\376\36\57\1\u01d9\33\57"+
    "\2\0\2\57\1\376\24\57\2\376\11\57\1\376\1\u01da"+
    "\31\57\2\0\2\57\1\376\42\57\1\u01db\27\57\2\0"+
    "\2\57\1\376\34\57\1\376\35\57\2\0\2\57\1\376"+
    "\45\57\1\376\24\57\2\0\2\57\1\376\24\57\1\376"+
    "\21\57\1\376\23\57\2\0\2\57\1\376\47\57\1\376"+
    "\22\57\2\0\2\57\1\376\43\57\1\376\26\57\2\0"+
    "\2\57\1\376\51\57\1\376\20\57\2\0\2\57\1\376"+
    "\52\57\1\376\17\57\2\0\2\57\1\376\21\57\51\0"+
    "\1\54\1\u01dc\26\0\1\u01dd\1\u01de\1\u01df\3\0\1\u01e0"+
    "\1\u01e1\1\0\1\u01e2\1\u01e3\1\u01e4\1\u01e5\1\u01e6\1\0"+
    "\1\u01e7\1\0\1\u01e8\1\u01e9\1\u01ea\1\u01eb\1\u01ec\1\u01ed"+
    "\1\u01ee\2\u01e5\1\0\1\u01e5\13\0\1\u01ef\1\0\2\u0110"+
    "\27\0\4\u0111\1\0\2\u0111\6\0\2\u0111\3\0\1\u0111"+
    "\4\0\1\u0111\2\0\1\u0112\6\u0111\1\0\1\u0112\6\0"+
    "\2\u0112\1\u0111\2\u0112\1\u0111\2\u0112\1\u0111\1\u0112\33\0"+
    "\1\u01f0\103\0\1\u01f1\1\0\1\u011b\15\0\1\u011c\1\u011d"+
    "\2\u011c\25\0\1\u012c\1\u01f2\7\0\1\u012c\66\0\1\u012c"+
    "\26\0\1\u011b\15\0\1\u011c\1\u011d\2\u011c\26\0\1\u012c"+
    "\143\0\1\u011c\32\0\2\66\1\u01f3\1\66\1\0\2\66"+
    "\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121"+
    "\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66"+
    "\6\0\12\66\40\0\1\u0121\116\0\3\u01f4\30\0\4\u0122"+
    "\1\0\2\u0122\2\0\1\u01f5\3\0\2\u0122\3\0\1\u0122"+
    "\1\0\1\u0121\1\u0122\1\0\1\u0122\1\0\1\u01f5\7\u0122"+
    "\1\0\1\u0122\6\0\12\u0122\14\0\4\66\1\0\1\66"+
    "\1\u01f6\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\14\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\5\66\1\u01f7\1\66\1\0"+
    "\1\66\6\0\12\66\14\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\1\66\1\u01f8\3\0\1\66\1\0\1\u0121"+
    "\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66"+
    "\6\0\12\66\14\0\4\66\1\0\2\66\2\0\1\u0120"+
    "\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122\1\0"+
    "\1\66\1\0\1\u0120\4\66\1\u01f9\2\66\1\0\1\66"+
    "\6\0\12\66\20\0\1\u01fa\21\0\1\u011b\15\0\1\u011c"+
    "\1\u011d\2\u011c\27\0\4\66\1\0\1\66\1\u01fb\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66\6\0"+
    "\12\66\14\0\4\66\1\0\2\66\2\0\1\u0120\3\0"+
    "\1\66\1\u01fc\3\0\1\66\1\0\1\u0121\1\u0122\1\0"+
    "\1\66\1\0\1\u0120\7\66\1\0\1\66\6\0\12\66"+
    "\23\0\1\u01fd\77\0\1\u01fe\15\0\1\u011b\15\0\1\u011c"+
    "\1\u011d\2\u011c\41\0\1\u0130\13\0\1\u011b\15\0\1\u011c"+
    "\1\u011d\2\u011c\24\0\1\u01ff\115\0\1\u0200\62\0\4\66"+
    "\1\0\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66"+
    "\1\0\1\u0121\1\u0122\1\u011b\1\66\1\0\1\u0120\7\66"+
    "\1\0\1\66\1\0\1\u011c\1\u011d\2\u011c\1\0\12\66"+
    "\14\0\4\66\1\0\2\66\2\0\1\u0120\3\0\2\66"+
    "\3\0\1\66\1\0\1\u0121\1\u0122\1\0\1\66\1\0"+
    "\1\u0120\6\66\1\u0201\1\0\1\66\6\0\12\66\33\0"+
    "\1\u0202\6\0\1\u011b\15\0\1\u011c\1\u011d\2\u011c\73\0"+
    "\3\u0203\25\0\1\u0144\1\u0160\1\u0161\1\u0162\1\0\1\u0163"+
    "\1\0\1\u0164\1\u0163\1\u0165\1\u0166\1\u0167\1\u0168\1\u0169"+
    "\1\0\1\u016a\1\u016b\1\0\1\u016c\1\u016d\1\u016e\1\0"+
    "\1\u016f\1\u0170\1\0\1\u0144\1\u0171\1\u0144\12\0\1\u0144"+
    "\1\u015d\1\u015e\2\u0204\1\u015f\12\0\1\u0144\1\0\1\u0144"+
    "\55\0\1\u0138\32\0\4\66\1\0\2\66\2\0\1\u0120"+
    "\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122\1\0"+
    "\1\66\1\0\1\u0120\5\66\1\u0205\1\66\1\0\1\66"+
    "\6\0\12\66\60\0\3\u0206\54\0\1\u0207\1\0\1\u011b"+
    "\15\0\1\u011c\1\u011d\2\u011c\27\0\4\66\1\0\2\66"+
    "\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121"+
    "\1\u0122\1\0\1\66\1\0\1\u0120\4\66\1\u0208\2\66"+
    "\1\0\1\66\6\0\12\66\14\0\4\66\1\0\2\66"+
    "\2\0\1\u0120\3\0\1\66\1\u0209\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\11\0\1\u015a\77\0\1\u020a\1\u015b"+
    "\7\0\1\u020b\1\u020c\1\0\1\u015b\5\0\1\u015b\5\0"+
    "\1\u020d\15\0\1\u015a\1\u020e\2\u015a\26\0\1\u020f\12\0"+
    "\1\u015b\13\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a\27\0"+
    "\1\u0148\1\u0210\2\u0148\1\0\2\u0148\2\0\1\u0211\3\0"+
    "\2\u0148\3\0\1\u0148\4\0\1\u0148\1\0\1\u0211\7\u0148"+
    "\1\0\1\u0148\6\0\12\u0148\14\0\4\u0148\1\0\2\u0148"+
    "\2\0\1\u0211\3\0\2\u0148\3\0\1\u0148\4\0\1\u0148"+
    "\1\0\1\u0211\7\u0148\1\0\1\u0148\6\0\12\u0148\14\0"+
    "\3\u0148\1\u0212\1\0\2\u0148\2\0\1\u0211\3\0\2\u0148"+
    "\3\0\1\u0148\4\0\1\u0148\1\0\1\u0211\7\u0148\1\0"+
    "\1\u0148\6\0\12\u0148\14\0\4\u0148\1\0\2\u0148\2\0"+
    "\1\u0211\3\0\1\u0213\1\u0148\3\0\1\u0148\4\0\1\u0148"+
    "\1\0\1\u0211\7\u0148\1\0\1\u0148\6\0\12\u0148\20\0"+
    "\1\u0214\21\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a\27\0"+
    "\3\u0148\1\u0215\1\0\2\u0148\2\0\1\u0211\3\0\2\u0148"+
    "\3\0\1\u0148\4\0\1\u0148\1\0\1\u0211\7\u0148\1\0"+
    "\1\u0148\6\0\12\u0148\14\0\4\u0148\1\0\2\u0148\2\0"+
    "\1\u0211\3\0\1\u0216\1\u0148\3\0\1\u0148\4\0\1\u0148"+
    "\1\0\1\u0211\7\u0148\1\0\1\u0148\6\0\12\u0148\13\0"+
    "\1\u020b\7\0\1\u0217\66\0\1\u015b\10\0\1\u0218\15\0"+
    "\1\u020d\15\0\1\u015a\1\u020e\2\u015a\41\0\1\u0219\13\0"+
    "\1\u020d\15\0\1\u015a\1\u020e\2\u015a\26\0\1\u015b\7\0"+
    "\1\u015b\2\0\1\u0219\13\0\1\u020d\15\0\1\u015a\1\u020e"+
    "\2\u015a\23\0\1\u0143\116\0\1\u021a\11\0\1\u020d\15\0"+
    "\1\u015a\1\u020e\2\u015a\27\0\4\u0148\1\0\2\u0148\2\0"+
    "\1\u0211\3\0\2\u0148\3\0\1\u021b\4\0\1\u0148\1\0"+
    "\1\u0211\7\u0148\1\0\1\u0148\6\0\12\u0148\33\0\1\u021c"+
    "\56\0\1\u015b\20\0\1\u015b\5\0\1\u020d\15\0\1\u015a"+
    "\1\u020e\2\u015a\50\0\1\u015b\22\0\1\u015d\1\u015e\54\0"+
    "\1\u015b\2\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a\53\0"+
    "\1\u021d\100\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a\27\0"+
    "\3\u0148\1\u021b\1\0\2\u0148\2\0\1\u0211\3\0\2\u0148"+
    "\3\0\1\u0148\4\0\1\u0148\1\0\1\u0211\7\u0148\1\0"+
    "\1\u0148\6\0\12\u0148\60\0\1\u015d\25\0\51\u015f\2\0"+
    "\24\u015f\3\0\1\u021e\1\u0144\7\0\1\u021f\1\u0220\1\0"+
    "\1\u0144\5\0\1\u0144\55\0\1\u021f\12\0\1\u0144\65\0"+
    "\1\u0221\100\0\1\u0222\77\0\1\u0223\107\0\1\u0144\60\0"+
    "\1\u021f\76\0\1\u0144\10\0\1\u0224\100\0\1\u0225\63\0"+
    "\1\u0144\7\0\1\u0144\2\0\1\u0225\100\0\1\u0226\104\0"+
    "\1\u0144\73\0\1\u0144\56\0\1\u0144\20\0\1\u0144\77\0"+
    "\1\u0144\22\0\1\u0204\1\u0227\54\0\1\u0144\77\0\1\u0144"+
    "\55\0\1\u0144\162\0\1\u0228\77\0\1\u0228\52\0\1\u0175"+
    "\30\0\1\u0179\144\0\1\u017c\1\u017d\52\0\1\u017b\22\0"+
    "\1\u017c\1\u017d\2\u017c\73\0\1\u017c\30\0\1\u017e\144\0"+
    "\1\u0181\1\u0182\52\0\1\u0180\22\0\1\u0181\1\u0182\2\u0181"+
    "\73\0\1\u0181\30\0\1\173\1\u0185\7\0\1\173\66\0"+
    "\1\173\103\0\1\173\101\0\1\173\77\0\1\173\100\0"+
    "\1\173\100\0\1\173\101\0\1\173\55\0\1\u019e\10\0"+
    "\1\u019e\66\0\1\u019e\77\0\2\222\1\u0229\1\222\1\0"+
    "\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222\4\0"+
    "\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222"+
    "\14\0\4\222\1\0\1\222\1\u022a\2\0\1\u0195\3\0"+
    "\2\222\3\0\1\222\4\0\1\222\1\0\1\u0195\7\222"+
    "\1\0\1\222\6\0\12\222\14\0\4\222\1\0\2\222"+
    "\2\0\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222"+
    "\1\0\1\u0195\5\222\1\u022b\1\222\1\0\1\222\6\0"+
    "\12\222\14\0\4\222\1\0\2\222\2\0\1\u0195\3\0"+
    "\2\222\3\0\1\222\4\0\1\222\1\0\1\u0195\4\222"+
    "\1\u022c\2\222\1\0\1\222\6\0\12\222\20\0\1\u022d"+
    "\72\0\4\222\1\0\1\222\1\u022e\2\0\1\u0195\3\0"+
    "\2\222\3\0\1\222\4\0\1\222\1\0\1\u0195\7\222"+
    "\1\0\1\222\6\0\12\222\14\0\4\222\1\0\2\222"+
    "\2\0\1\u0195\3\0\1\222\1\u022f\3\0\1\222\4\0"+
    "\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222"+
    "\23\0\1\u0230\77\0\1\u0231\100\0\1\u01a1\100\0\1\u0232"+
    "\62\0\4\222\1\0\2\222\2\0\1\u0195\3\0\2\222"+
    "\3\0\1\222\4\0\1\222\1\0\1\u0195\6\222\1\u0233"+
    "\1\0\1\222\6\0\12\222\33\0\1\u0195\57\0\4\222"+
    "\1\0\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222"+
    "\4\0\1\222\1\0\1\u0195\5\222\1\u0234\1\222\1\0"+
    "\1\222\6\0\12\222\14\0\4\222\1\0\2\222\2\0"+
    "\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222\1\0"+
    "\1\u0195\4\222\1\u0235\2\222\1\0\1\222\6\0\12\222"+
    "\14\0\4\222\1\0\2\222\2\0\1\u0195\3\0\1\222"+
    "\1\u0236\3\0\1\222\4\0\1\222\1\0\1\u0195\7\222"+
    "\1\0\1\222\6\0\12\222\60\0\1\253\1\254\120\0"+
    "\1\u0237\77\0\1\u0237\10\0\1\u0238\2\0\2\u0238\23\0"+
    "\1\u0238\1\0\2\u0238\4\0\1\u0238\7\0\4\u0238\2\0"+
    "\1\u0238\1\0\1\u0238\60\0\1\u01b0\121\0\1\u0239\77\0"+
    "\1\u0239\52\0\1\u01b5\121\0\1\u023a\77\0\1\u023b\75\0"+
    "\1\u023c\77\0\1\u023c\75\0\1\u023d\77\0\1\u023d\1\0"+
    "\51\u01c0\2\0\24\u01c0\74\0\1\u023e\77\0\1\u023e\52\0"+
    "\1\u01c3\34\0\1\315\2\0\2\315\23\0\1\315\1\0"+
    "\2\315\4\0\1\315\7\0\4\315\2\0\1\315\1\0"+
    "\1\315\12\0\1\370\1\u01c8\7\0\1\370\66\0\1\370"+
    "\101\0\1\371\112\0\1\370\64\0\1\370\100\0\1\370"+
    "\77\0\1\370\77\0\1\370\100\0\1\370\100\0\1\370"+
    "\101\0\1\370\123\0\1\u01d2\3\372\22\0\3\57\1\376"+
    "\45\57\2\0\2\57\1\376\25\57\1\376\7\57\1\376"+
    "\34\57\2\0\2\57\1\376\27\57\1\u023f\42\57\2\0"+
    "\2\57\1\376\32\57\1\376\37\57\2\0\2\57\1\376"+
    "\30\57\1\376\2\57\1\376\36\57\2\0\2\57\1\376"+
    "\36\57\1\376\33\57\2\0\2\57\1\376\37\57\2\376"+
    "\31\57\2\0\2\57\1\376\42\57\1\376\27\57\2\0"+
    "\2\57\1\376\21\57\51\0\1\54\26\0\1\u0240\100\0"+
    "\1\u0241\76\0\1\u01e5\1\u0242\7\0\2\u0243\1\0\1\u01e5"+
    "\5\0\1\u01e5\60\0\1\u0244\24\0\1\u01e5\53\0\1\u0245"+
    "\75\0\1\u0246\71\0\1\u0243\10\0\1\u0247\2\0\1\u01e5"+
    "\74\0\1\u0248\64\0\2\u01e5\11\0\1\u01e5\1\u0249\100\0"+
    "\1\u024a\77\0\1\u024b\100\0\1\u024c\55\0\1\u01e5\21\0"+
    "\1\u01e5\77\0\1\u01e5\72\0\1\u01e5\104\0\1\u01e5\77\0"+
    "\1\u01e5\47\0\1\u01dd\1\u01de\1\u01df\3\0\1\u01e0\1\u01e1"+
    "\1\0\1\u01e2\1\u01e3\1\u01e4\1\u01e5\1\u01e6\1\0\1\u01e7"+
    "\1\0\1\u01e8\1\u01e9\1\u01ea\1\u01eb\1\u01ec\1\u01ed\1\u01ee"+
    "\2\u01e5\1\0\1\u01e5\13\0\1\u01ef\3\u0110\46\0\1\u01e5"+
    "\123\0\3\u024d\27\0\1\u024e\77\0\3\66\1\u024f\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\14\0\2\66\1\u0250\1\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\14\0\2\66\1\u0251\1\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\40\0\1\u0252\1\0\1\u011b\15\0"+
    "\1\u011c\1\u011d\2\u011c\27\0\2\66\1\u0253\1\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\40\0\1\u0121\1\0\1\u011b\15\0"+
    "\1\u011c\1\u011d\2\u011c\27\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\3\66\1\u0254\3\66\1\0"+
    "\1\66\6\0\12\66\14\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\5\66\1\u0255\1\66\1\0"+
    "\1\66\6\0\12\66\14\0\4\66\1\0\2\66\2\0"+
    "\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121\1\u0122"+
    "\1\0\1\66\1\0\1\u0120\3\66\1\u0256\3\66\1\0"+
    "\1\66\6\0\12\66\12\0\1\u015b\1\u0257\7\0\1\u015b"+
    "\66\0\1\u015b\26\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a"+
    "\26\0\1\u015b\143\0\1\u015a\32\0\2\u0148\1\u015c\1\u0148"+
    "\1\0\2\u0148\2\0\1\u0211\3\0\2\u0148\3\0\1\u0148"+
    "\4\0\1\u0148\1\0\1\u0211\7\u0148\1\0\1\u0148\6\0"+
    "\12\u0148\14\0\4\u0148\1\0\1\u0148\1\u0216\2\0\1\u0211"+
    "\3\0\2\u0148\3\0\1\u0148\4\0\1\u0148\1\0\1\u0211"+
    "\7\u0148\1\0\1\u0148\6\0\12\u0148\14\0\4\u0148\1\0"+
    "\2\u0148\2\0\1\u0211\3\0\1\u0148\1\u0258\3\0\1\u0148"+
    "\4\0\1\u0148\1\0\1\u0211\7\u0148\1\0\1\u0148\6\0"+
    "\12\u0148\20\0\1\u015b\21\0\1\u020d\15\0\1\u015a\1\u020e"+
    "\2\u015a\27\0\4\u0148\1\0\1\u0148\1\u021b\2\0\1\u0211"+
    "\3\0\2\u0148\3\0\1\u0148\4\0\1\u0148\1\0\1\u0211"+
    "\7\u0148\1\0\1\u0148\6\0\12\u0148\23\0\1\u015a\77\0"+
    "\1\u015b\15\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a\41\0"+
    "\1\u015b\13\0\1\u020d\15\0\1\u015a\1\u020e\2\u015a\43\0"+
    "\1\u015b\62\0\4\u0148\1\0\2\u0148\2\0\1\u0211\3\0"+
    "\2\u0148\3\0\1\u0148\3\0\1\u020d\1\u0148\1\0\1\u0211"+
    "\7\u0148\1\0\1\u0148\1\0\1\u015a\1\u020e\2\u015a\1\0"+
    "\12\u0148\33\0\1\u0259\6\0\1\u020d\15\0\1\u015a\1\u020e"+
    "\2\u015a\53\0\1\u025a\1\0\1\u020d\15\0\1\u015a\1\u020e"+
    "\2\u015a\25\0\1\u0144\10\0\1\u0144\66\0\1\u0144\101\0"+
    "\1\u0171\102\0\1\u0144\74\0\1\u0144\102\0\1\u0144\100\0"+
    "\1\u0144\100\0\1\u0144\126\0\1\u0204\32\0\3\222\1\u025b"+
    "\1\0\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222"+
    "\4\0\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0"+
    "\12\222\14\0\2\222\1\u025c\1\222\1\0\2\222\2\0"+
    "\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222\1\0"+
    "\1\u0195\7\222\1\0\1\222\6\0\12\222\14\0\2\222"+
    "\1\u025d\1\222\1\0\2\222\2\0\1\u0195\3\0\2\222"+
    "\3\0\1\222\4\0\1\222\1\0\1\u0195\7\222\1\0"+
    "\1\222\6\0\12\222\14\0\2\222\1\u025e\1\222\1\0"+
    "\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222\4\0"+
    "\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222"+
    "\14\0\4\222\1\0\2\222\2\0\1\u0195\3\0\2\222"+
    "\3\0\1\222\4\0\1\222\1\0\1\u0195\3\222\1\u025f"+
    "\3\222\1\0\1\222\6\0\12\222\14\0\4\222\1\0"+
    "\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222\4\0"+
    "\1\222\1\0\1\u0195\5\222\1\u0260\1\222\1\0\1\222"+
    "\6\0\12\222\14\0\4\222\1\0\2\222\2\0\1\u0195"+
    "\3\0\2\222\3\0\1\222\4\0\1\222\1\0\1\u0195"+
    "\3\222\1\u0261\3\222\1\0\1\222\6\0\12\222\16\0"+
    "\1\u0262\2\0\2\u0262\23\0\1\u0262\1\0\2\u0262\4\0"+
    "\1\u0262\7\0\4\u0262\2\0\1\u0262\1\0\1\u0262\103\0"+
    "\1\u0263\77\0\1\u0263\1\0\5\57\1\376\43\57\2\0"+
    "\2\57\1\376\21\57\20\0\1\u01e5\61\0\1\u01e5\76\0"+
    "\1\u0241\1\u01e5\7\0\1\u01e5\70\0\1\u0264\101\0\1\u01e5"+
    "\77\0\1\u01e5\100\0\1\u01e5\77\0\1\u01e5\77\0\2\u01e5"+
    "\100\0\1\u01e5\65\0\1\u01e5\117\0\1\u0265\1\0\1\u011b"+
    "\15\0\1\u011c\1\u011d\2\u011c\27\0\4\66\1\0\2\66"+
    "\2\0\1\u0120\3\0\2\66\3\0\1\u0266\1\0\1\u0121"+
    "\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66"+
    "\6\0\12\66\60\0\3\u0267\30\0\4\66\1\0\2\66"+
    "\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121"+
    "\1\u0122\1\0\1\66\1\0\1\u0120\6\66\1\u0268\1\0"+
    "\1\66\6\0\12\66\14\0\2\66\1\u0269\1\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\14\0\1\66\1\u026a\2\66\1\0"+
    "\2\66\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0"+
    "\1\u0121\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0"+
    "\1\66\6\0\12\66\13\0\1\u015a\77\0\4\222\1\0"+
    "\2\222\2\0\1\u0195\3\0\2\222\3\0\1\u026b\4\0"+
    "\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222"+
    "\14\0\4\222\1\0\2\222\2\0\1\u0195\3\0\2\222"+
    "\3\0\1\222\4\0\1\222\1\0\1\u0195\6\222\1\u026c"+
    "\1\0\1\222\6\0\12\222\14\0\2\222\1\u026d\1\222"+
    "\1\0\2\222\2\0\1\u0195\3\0\2\222\3\0\1\222"+
    "\4\0\1\222\1\0\1\u0195\7\222\1\0\1\222\6\0"+
    "\12\222\14\0\1\222\1\u026e\2\222\1\0\2\222\2\0"+
    "\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222\1\0"+
    "\1\u0195\7\222\1\0\1\222\6\0\12\222\16\0\1\u026f"+
    "\2\0\2\u026f\23\0\1\u026f\1\0\2\u026f\4\0\1\u026f"+
    "\7\0\4\u026f\2\0\1\u026f\1\0\1\u026f\14\0\1\u01e5"+
    "\142\0\3\u0270\30\0\2\66\1\u0271\1\66\1\0\2\66"+
    "\2\0\1\u0120\3\0\2\66\3\0\1\66\1\0\1\u0121"+
    "\1\u0122\1\0\1\66\1\0\1\u0120\7\66\1\0\1\66"+
    "\6\0\12\66\14\0\2\222\1\u0272\1\222\1\0\2\222"+
    "\2\0\1\u0195\3\0\2\222\3\0\1\222\4\0\1\222"+
    "\1\0\1\u0195\7\222\1\0\1\222\6\0\12\222\16\0"+
    "\1\u0273\2\0\2\u0273\23\0\1\u0273\1\0\2\u0273\4\0"+
    "\1\u0273\7\0\4\u0273\2\0\1\u0273\1\0\1\u0273\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29358];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\57\0\1\11\1\1\1\11\33\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\0\3\1\4\11\2\1\1\11"+
    "\11\1\1\11\20\1\11\11\1\1\1\11\1\1\2\11"+
    "\2\1\2\11\17\1\1\11\10\1\2\11\1\1\1\11"+
    "\3\1\1\0\2\1\2\11\1\0\3\11\1\0\2\11"+
    "\1\1\2\11\2\1\2\0\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\3\1\1\11\1\0\2\1\1\11\3\1"+
    "\1\11\3\1\1\11\1\0\1\11\1\0\4\1\1\0"+
    "\2\11\1\0\1\1\2\11\2\1\1\0\2\1\2\0"+
    "\1\1\2\0\3\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\4\0\2\1\2\0\1\1\7\0\1\1\3\0"+
    "\3\1\1\0\2\1\1\11\2\0\3\1\2\0\10\1"+
    "\1\0\5\1\2\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\5\1\1\0\1\11\6\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\2\0\2\1\5\0"+
    "\2\1\2\0\3\1\5\0\1\1\1\0\1\1\2\0"+
    "\1\1\5\0\1\11\2\0\1\11\1\0\3\11\2\0"+
    "\1\1\1\0\1\11\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\2\0\2\1\1\0\1\11\1\1"+
    "\1\0\2\11\1\1\1\11\7\1\1\0\1\11\2\1"+
    "\1\11\1\0\3\1\1\11\4\1\3\0\1\1\2\11"+
    "\1\0\1\11\2\0\1\11\7\0\1\11\2\0\1\1"+
    "\2\0\1\11\1\0\1\1\1\0\1\1\3\0\1\1"+
    "\2\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\11\2\1\2\0\1\1\2\0\1\1\5\0\1\1"+
    "\1\11\1\0\11\1\1\0\3\1\1\11\1\0\1\1"+
    "\2\11\4\1\1\0\1\11\1\0\2\1\1\11\5\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\3\0\3\1"+
    "\2\0\1\11\4\1\1\11\2\1\3\11\4\1\1\11"+
    "\1\1\1\11\2\0\3\11\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\2\0\2\1\2\0\1\1\1\11\1\0"+
    "\3\1\1\0\4\1\1\0\2\1\1\11\10\1\1\11"+
    "\2\0\1\1\1\11\10\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  @Nullable
  private Level level = null;
  @Nullable
  private Project project = null;
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInLastState() {
    org.elixir_lang.lexer.StackFrame stackFrame = pop();
    handleInState(stackFrame.getLastLexicalState());
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private void handleLastEOL() {
    CharSequence text = yytext();
    int length = text.length();

    for (int i = length - 1; i >= 0; i--) {
      if (text.charAt(i) == '\n') {
        if (i == 0 || text.charAt(i - 1) != '\\') {
          yypushback(length - i);
          break;
        }
      }
    }

    pushAndBegin(LAST_EOL);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  private void popAndBegin() {
    org.elixir_lang.lexer.StackFrame stackFrame = pop();
    yybegin(stackFrame.getLastLexicalState());
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }

  @NotNull
  public Level getLevel() {
    if (this.level == null) {
      Project project = this.project;
      Level level;

      if (project != null) {
        level = LevelPropertyPusher.level(project);
      } else {
        level = Level.MAXIMUM;
      }

      this.level = level;
    }

    return this.level;
  }

  public void setLevel(@Nullable Level level) {
    this.level = level;
  }

  @Nullable
  public Project getProject() {
    return project;
  }

  public void setProject(@Nullable Project project) {
    this.project = project;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 184: break;
          case 2: 
            { // use stack to match up nested OPENING_CURLY and CLOSING_CURLY
                                               pushAndBegin(YYINITIAL);
                                               pushAndBegin(MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.OPENING_CURLY;
            } 
            // fall through
          case 185: break;
          case 3: 
            { yybegin(ADDITION_OR_SUBTRACTION_MAYBE);
                    return ElixirTypes.CLOSING_CURLY;
            } 
            // fall through
          case 186: break;
          case 4: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
            } 
            // fall through
          case 187: break;
          case 5: 
            { pushAndBegin(AFTER_UNQUALIFIED_IDENTIFIER);
                                               return ElixirTypes.IDENTIFIER_TOKEN;
            } 
            // fall through
          case 188: break;
          case 6: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
            } 
            // fall through
          case 189: break;
          case 7: 
            { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
            } 
            // fall through
          case 190: break;
          case 8: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
            } 
            // fall through
          case 191: break;
          case 9: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
            } 
            // fall through
          case 192: break;
          case 10: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
            } 
            // fall through
          case 193: break;
          case 11: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
            } 
            // fall through
          case 194: break;
          case 12: 
            { pushAndBegin(DOT_OPERATION);
                                               return ElixirTypes.DOT_OPERATOR;
            } 
            // fall through
          case 195: break;
          case 13: 
            { return ElixirTypes.NEGATE_OPERATOR;
            } 
            // fall through
          case 196: break;
          case 14: 
            { return ElixirTypes.NUMBER_OR_BADARITH_OPERATOR;
            } 
            // fall through
          case 197: break;
          case 15: 
            { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
            } 
            // fall through
          case 198: break;
          case 16: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
            } 
            // fall through
          case 199: break;
          case 17: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.DIVISION_OPERATOR;
            } 
            // fall through
          case 200: break;
          case 18: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
            } 
            // fall through
          case 201: break;
          case 19: 
            { pushAndBegin(ADDITION_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                                                          pushAndBegin(CHAR_TOKENIZATION);
                                                          return ElixirTypes.CHAR_TOKENIZER;
            } 
            // fall through
          case 202: break;
          case 20: 
            { pushAndBegin(DECIMAL_WHOLE_NUMBER);
                                               return ElixirTypes.VALID_DECIMAL_DIGITS;
            } 
            // fall through
          case 203: break;
          case 21: 
            { return ElixirTypes.COMMA;
            } 
            // fall through
          case 204: break;
          case 22: 
            { pushAndBegin(ADDITION_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.ALIAS_TOKEN;
            } 
            // fall through
          case 205: break;
          case 23: 
            { pushAndBegin(MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.SEMICOLON;
            } 
            // fall through
          case 206: break;
          case 24: 
            { return ElixirTypes.EOL;
            } 
            // fall through
          case 207: break;
          case 25: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 208: break;
          case 26: 
            { return ElixirTypes.COMMENT;
            } 
            // fall through
          case 209: break;
          case 27: 
            { pushAndBegin(ADDITION_OR_SUBTRACTION_MAYBE);
                                               return ElixirTypes.CLOSING_BRACKET;
            } 
            // fall through
          case 210: break;
          case 28: 
            { pushAndBegin(MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.OPENING_BRACKET;
            } 
            // fall through
          case 211: break;
          case 29: 
            { pushAndBegin(ADDITION_OR_SUBTRACTION_MAYBE);
                                               return ElixirTypes.CLOSING_PARENTHESIS;
            } 
            // fall through
          case 212: break;
          case 30: 
            { pushAndBegin(MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.OPENING_PARENTHESIS;
            } 
            // fall through
          case 213: break;
          case 31: 
            { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(ADDITION_OR_KEYWORD_PAIR_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
            } 
            // fall through
          case 214: break;
          case 32: 
            { handleInLastState();
            } 
            // fall through
          case 215: break;
          case 33: 
            { yybegin(ADDITION_OR_SUBTRACTION_MAYBE);
                                         return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 216: break;
          case 34: 
            { yybegin(MULTILINE_WHITE_SPACE_MAYBE);
                           return ElixirTypes.SUBTRACTION_OPERATOR;
            } 
            // fall through
          case 217: break;
          case 35: 
            { yybegin(MULTILINE_WHITE_SPACE_MAYBE);
                           return ElixirTypes.ADDITION_OPERATOR;
            } 
            // fall through
          case 218: break;
          case 36: 
            { yybegin(AFTER_IDENTIFIER_WHITE_SPACE);
                           return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 219: break;
          case 37: 
            { handleInLastState();
                                            // zero-width token
                                            return ElixirTypes.CALL;
            } 
            // fall through
          case 220: break;
          case 38: 
            { yybegin(ADDITION_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                      return ElixirTypes.ATOM_FRAGMENT;
            } 
            // fall through
          case 221: break;
          case 39: 
            { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                         anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                         this, EOL and WHITESPACE won't be handled correctly */
                      yybegin(ADDITION_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                      startQuote(yytext());
                      return promoterType();
            } 
            // fall through
          case 222: break;
          case 40: 
            { yybegin(UNKNOWN_BASE_WHOLE_NUMBER);
                                             return ElixirTypes.UNKNOWN_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 223: break;
          case 41: 
            { yybegin(OCTAL_WHOLE_NUMBER);
                                             return ElixirTypes.OCTAL_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 224: break;
          case 42: 
            { yybegin(BINARY_WHOLE_NUMBER);
                                             return ElixirTypes.BINARY_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 225: break;
          case 43: 
            { yybegin(BINARY_WHOLE_NUMBER);
                                             return ElixirTypes.OBSOLETE_BINARY_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 226: break;
          case 44: 
            { yybegin(HEXADECIMAL_WHOLE_NUMBER);
                                             return ElixirTypes.HEXADECIMAL_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 227: break;
          case 45: 
            { yybegin(HEXADECIMAL_WHOLE_NUMBER);
                                             return ElixirTypes.OBSOLETE_HEXADECIMAL_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 228: break;
          case 46: 
            { handleInState(ADDITION_OR_SUBTRACTION_MAYBE);
            } 
            // fall through
          case 229: break;
          case 47: 
            { return ElixirTypes.INVALID_BINARY_DIGITS;
            } 
            // fall through
          case 230: break;
          case 48: 
            { return ElixirTypes.NUMBER_SEPARATOR;
            } 
            // fall through
          case 231: break;
          case 49: 
            { return ElixirTypes.VALID_BINARY_DIGITS;
            } 
            // fall through
          case 232: break;
          case 50: 
            { popAndBegin();
             return ElixirTypes.CHAR_LIST_FRAGMENT;
            } 
            // fall through
          case 233: break;
          case 51: 
            { yybegin(ESCAPE_SEQUENCE);
             return ElixirTypes.ESCAPE;
            } 
            // fall through
          case 234: break;
          case 52: 
            { return ElixirTypes.INVALID_DECIMAL_DIGITS;
            } 
            // fall through
          case 235: break;
          case 53: 
            { return ElixirTypes.VALID_DECIMAL_DIGITS;
            } 
            // fall through
          case 236: break;
          case 54: 
            { handleInState(DECIMAL_EXPONENT);
            } 
            // fall through
          case 237: break;
          case 55: 
            { yybegin(DECIMAL_EXPONENT);
                    return ElixirTypes.SIGN_OPERATOR;
            } 
            // fall through
          case 238: break;
          case 56: 
            { yybegin(DECIMAL_EXPONENT_SIGN);
                    return ElixirTypes.EXPONENT_MARK;
            } 
            // fall through
          case 239: break;
          case 57: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.RELATIONAL_OPERATOR;
            } 
            // fall through
          case 240: break;
          case 58: 
            { yybegin(AFTER_RELATIVE_IDENTIFIER);
                                                      return ElixirTypes.IDENTIFIER_TOKEN;
            } 
            // fall through
          case 241: break;
          case 59: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.CAPTURE_OPERATOR;
            } 
            // fall through
          case 242: break;
          case 60: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.PIPE_OPERATOR;
            } 
            // fall through
          case 243: break;
          case 61: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.UNARY_OPERATOR;
            } 
            // fall through
          case 244: break;
          case 62: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.MATCH_OPERATOR;
            } 
            // fall through
          case 245: break;
          case 63: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.STRUCT_OPERATOR;
            } 
            // fall through
          case 246: break;
          case 64: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.MINUS_OPERATOR;
            } 
            // fall through
          case 247: break;
          case 65: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.PLUS_OPERATOR;
            } 
            // fall through
          case 248: break;
          case 66: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AT_OPERATOR;
            } 
            // fall through
          case 249: break;
          case 67: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.DIVISION_OPERATOR;
            } 
            // fall through
          case 250: break;
          case 68: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.MULTIPLICATION_OPERATOR;
            } 
            // fall through
          case 251: break;
          case 69: 
            { /* return to CALL_MAYBE so that OPENING_BRACKET or
                                                         OPENING_PARENTHESES after quote can be parsed
                                                         with CALL so parser doesn't think call is no parentheses with
                                                         parenthetical or list argument. */
                                                      yybegin(CALL_MAYBE);
                                                      startQuote(yytext());
                                                      return promoterType();
            } 
            // fall through
          case 252: break;
          case 70: 
            { yybegin(GROUP);
          return fragmentType();
            } 
            // fall through
          case 253: break;
          case 71: 
            { yybegin(GROUP);
          return ElixirTypes.EOL;
            } 
            // fall through
          case 254: break;
          case 72: 
            { popAndBegin();
                                    return ElixirTypes.ESCAPED_CHARACTER_TOKEN;
            } 
            // fall through
          case 255: break;
          case 73: 
            { yybegin(UNICODE_ESCAPE_SEQUENCE);
                                    return ElixirTypes.UNICODE_ESCAPE_CHARACTER;
            } 
            // fall through
          case 256: break;
          case 74: 
            { popAndBegin();
                                    return ElixirTypes.EOL;
            } 
            // fall through
          case 257: break;
          case 75: 
            { yybegin(HEXADECIMAL_ESCAPE_SEQUENCE);
                                    return ElixirTypes.HEXADECIMAL_WHOLE_NUMBER_BASE;
            } 
            // fall through
          case 258: break;
          case 76: 
            { popAndBegin();
                             return ElixirTypes.CLOSING_CURLY;
            } 
            // fall through
          case 259: break;
          case 77: 
            { return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
            } 
            // fall through
          case 260: break;
          case 78: 
            { return fragmentType();
            } 
            // fall through
          case 261: break;
          case 79: 
            { if (isTerminator(yytext())) {
                                 if (isSigil()) {
                                   yybegin(SIGIL_MODIFIERS);
                                   return terminatorType();
                                 } else {
                                   org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                   yybegin(stackFrame.getLastLexicalState());
                                   return stackFrame.terminatorType();
                                 }
                               } else {
                                 return fragmentType();
                               }
            } 
            // fall through
          case 262: break;
          case 80: 
            { if (isInterpolating()) {
                                 pushAndBegin(ESCAPE_SEQUENCE);
                                 return ElixirTypes.ESCAPE;
                               } else {
                                 yybegin(ESCAPE_IN_LITERAL_GROUP);
                                 return fragmentType();
                               }
            } 
            // fall through
          case 263: break;
          case 81: 
            { if (isInterpolating()) {
                       pushAndBegin(ESCAPE_SEQUENCE);
                       return ElixirTypes.ESCAPE;
                     } else {
                       return fragmentType();
                     }
            } 
            // fall through
          case 264: break;
          case 82: 
            { yybegin(GROUP_HEREDOC_LINE_START);
                     return ElixirTypes.EOL;
            } 
            // fall through
          case 265: break;
          case 83: 
            { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
            } 
            // fall through
          case 266: break;
          case 84: 
            { handleInState(GROUP_HEREDOC_LINE_BODY);
            } 
            // fall through
          case 267: break;
          case 85: 
            { yybegin(GROUP_HEREDOC_LINE_BODY);
                                             return ElixirTypes.HEREDOC_LINE_WHITE_SPACE_TOKEN;
            } 
            // fall through
          case 268: break;
          case 86: 
            { yybegin(GROUP_HEREDOC_LINE_START);
                               return ElixirTypes.EOL;
            } 
            // fall through
          case 269: break;
          case 87: 
            { yybegin(EXTENDED_HEXADECIMAL_ESCAPE_SEQUENCE);
                             return ElixirTypes.OPENING_CURLY;
            } 
            // fall through
          case 270: break;
          case 88: 
            { popAndBegin();
                             return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
            } 
            // fall through
          case 271: break;
          case 89: 
            { return ElixirTypes.INVALID_HEXADECIMAL_DIGITS;
            } 
            // fall through
          case 272: break;
          case 90: 
            { popAndBegin();
                                return ElixirTypes.INTERPOLATION_END;
            } 
            // fall through
          case 273: break;
          case 91: 
            { popAndBegin();
                                        return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 274: break;
          case 92: 
            { popAndBegin();
          return ElixirTypes.EOL;
            } 
            // fall through
          case 275: break;
          case 93: 
            { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
            } 
            // fall through
          case 276: break;
          case 94: 
            { return ElixirTypes.INVALID_OCTAL_DIGITS;
            } 
            // fall through
          case 277: break;
          case 95: 
            { return ElixirTypes.VALID_OCTAL_DIGITS;
            } 
            // fall through
          case 278: break;
          case 96: 
            { popAndBegin();
                                 return ElixirTypes.DIVISION_OPERATOR;
            } 
            // fall through
          case 279: break;
          case 97: 
            { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
            } 
            // fall through
          case 280: break;
          case 98: 
            { return ElixirTypes.SIGIL_MODIFIER;
            } 
            // fall through
          case 281: break;
          case 99: 
            { return ElixirTypes.INVALID_UNKNOWN_BASE_DIGITS;
            } 
            // fall through
          case 282: break;
          case 100: 
            { pushAndBegin(MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.OPENING_BIT;
            } 
            // fall through
          case 283: break;
          case 101: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
            } 
            // fall through
          case 284: break;
          case 102: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
            } 
            // fall through
          case 285: break;
          case 103: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
            } 
            // fall through
          case 286: break;
          case 104: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 39;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 40;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { pushAndBegin(REFERENCE_OPERATION);
                                                         return ElixirTypes.IDENTIFIER_TOKEN;
            } 
            // fall through
          case 287: break;
          case 105: 
            { pushAndBegin(ADDITION_OR_SUBTRACTION_MAYBE);
                                               return ElixirTypes.CLOSING_BIT;
            } 
            // fall through
          case 288: break;
          case 106: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.AND_SYMBOL_OPERATOR;
            } 
            // fall through
          case 289: break;
          case 107: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.DO;
            } 
            // fall through
          case 290: break;
          case 108: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.OR_SYMBOL_OPERATOR;
            } 
            // fall through
          case 291: break;
          case 109: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
            } 
            // fall through
          case 292: break;
          case 110: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
            } 
            // fall through
          case 293: break;
          case 111: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.OR_WORD_OPERATOR;
            } 
            // fall through
          case 294: break;
          case 112: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.RANGE_OPERATOR;
            } 
            // fall through
          case 295: break;
          case 113: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
            } 
            // fall through
          case 296: break;
          case 114: 
            { pushAndBegin(MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.TYPE_OPERATOR;
            } 
            // fall through
          case 297: break;
          case 115: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return ElixirTypes.COLON;
            } 
            // fall through
          case 298: break;
          case 116: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
            } 
            // fall through
          case 299: break;
          case 117: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.FN;
            } 
            // fall through
          case 300: break;
          case 118: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 41;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 42;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 301: break;
          case 119: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 43;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 45;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { handleLastEOL();
                                                     return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 302: break;
          case 120: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { pushAndBegin(BASE_WHOLE_NUMBER_BASE);
                                                          return ElixirTypes.BASE_WHOLE_NUMBER_PREFIX;
            } 
            // fall through
          case 303: break;
          case 121: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MULTILINE_WHITE_SPACE_MAYBE);
                      return ElixirTypes.KEYWORD_PAIR_COLON;
            } 
            // fall through
          case 304: break;
          case 122: 
            { yybegin(MULTILINE_WHITE_SPACE_MAYBE);
                           return ElixirTypes.TWO_OPERATOR;
            } 
            // fall through
          case 305: break;
          case 123: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { popAndBegin();
                                                                           return ElixirTypes.SUBTRACTION_OPERATOR;
            } 
            // fall through
          case 306: break;
          case 124: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MULTILINE_WHITE_SPACE_MAYBE);
                                                                           return ElixirTypes.SUBTRACTION_OPERATOR;
            } 
            // fall through
          case 307: break;
          case 125: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { popAndBegin();
                                                                           return ElixirTypes.ADDITION_OPERATOR;
            } 
            // fall through
          case 308: break;
          case 126: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MULTILINE_WHITE_SPACE_MAYBE);
                                                                           return ElixirTypes.ADDITION_OPERATOR;
            } 
            // fall through
          case 309: break;
          case 127: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DECIMAL_FRACTION);
                                            return ElixirTypes.DECIMAL_MARK;
            } 
            // fall through
          case 310: break;
          case 128: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.TWO_OPERATOR;
            } 
            // fall through
          case 311: break;
          case 129: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.ARROW_OPERATOR;
            } 
            // fall through
          case 312: break;
          case 130: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.IN_MATCH_OPERATOR;
            } 
            // fall through
          case 313: break;
          case 131: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AND_SYMBOL_OPERATOR;
            } 
            // fall through
          case 314: break;
          case 132: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.DO;
            } 
            // fall through
          case 315: break;
          case 133: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.OR_SYMBOL_OPERATOR;
            } 
            // fall through
          case 316: break;
          case 134: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.COMPARISON_OPERATOR;
            } 
            // fall through
          case 317: break;
          case 135: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.OR_WORD_OPERATOR;
            } 
            // fall through
          case 318: break;
          case 136: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.RANGE_OPERATOR;
            } 
            // fall through
          case 319: break;
          case 137: 
            { yybegin(CALL_MAYBE);

                                                      if (getLevel().compareTo(Level.V_1_6) < 0) {
                                                        return ElixirTypes.STAB_OPERATOR;
                                                      } else {
                                                        yypushback(1);
                                                        return ElixirTypes.MINUS_OPERATOR;
                                                      }
            } 
            // fall through
          case 320: break;
          case 138: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.IN_OPERATOR;
            } 
            // fall through
          case 321: break;
          case 139: 
            { CharSequence groupTerminator = yytext().subSequence(1, yytext().length());

                               // manual lookahread pushes terminator back
                               yypushback(groupTerminator.length());

                               /* even literal groups have escape sequences because escaping the terminator is still
                                  allowed */
                               if (isTerminator(groupTerminator) || isInterpolating()) {
                                 // matches interpolating behavior from `{ESCAPE}` rule below
                                 pushAndBegin(ESCAPE_SEQUENCE);
                                 return ElixirTypes.ESCAPE;
                               } else {
                                 // matches non-interpolating behavior from `{ESCAPE}` rule below
                                 yybegin(ESCAPE_IN_LITERAL_GROUP);
                                 return fragmentType();
                               }
            } 
            // fall through
          case 322: break;
          case 140: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (isInterpolating()) {
                                 pushAndBegin(ESCAPE_SEQUENCE);
                               } else {
                                 yybegin(ESCAPE_IN_LITERAL_GROUP);
                               }

                               return ElixirTypes.ESCAPE;
            } 
            // fall through
          case 323: break;
          case 141: 
            { if (isInterpolating()) {
                           pushAndBegin(INTERPOLATION);
                           return ElixirTypes.INTERPOLATION_START;
                          } else {
                           return fragmentType();
                          }
            } 
            // fall through
          case 324: break;
          case 142: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(GROUP_HEREDOC_LINE_ESCAPED_EOL);
                     return ElixirTypes.ESCAPE;
            } 
            // fall through
          case 325: break;
          case 143: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 41;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 46;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 326: break;
          case 144: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ATOM_FRAGMENT;
            } 
            // fall through
          case 327: break;
          case 145: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
            } 
            // fall through
          case 328: break;
          case 146: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.NOT_OPERATOR;
            } 
            // fall through
          case 329: break;
          case 147: 
            { pushAndBegin(ADDITION_OR_KEYWORD_PAIR_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.NIL;
            } 
            // fall through
          case 330: break;
          case 148: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.AND_WORD_OPERATOR;
            } 
            // fall through
          case 331: break;
          case 149: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.THREE_OPERATOR;
            } 
            // fall through
          case 332: break;
          case 150: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MINUS_OPERATOR;
            } 
            // fall through
          case 333: break;
          case 151: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PLUS_OPERATOR;
            } 
            // fall through
          case 334: break;
          case 152: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
            } 
            // fall through
          case 335: break;
          case 153: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { handleLastEOL();
                                                     return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 336: break;
          case 154: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 43;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 44;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { handleLastEOL();
                                                                   return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 337: break;
          case 155: 
            { pushAndBegin(ADDITION_OR_SUBTRACTION_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
            } 
            // fall through
          case 338: break;
          case 156: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.END;
            } 
            // fall through
          case 339: break;
          case 157: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.NIL;
            } 
            // fall through
          case 340: break;
          case 158: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AND_WORD_OPERATOR;
            } 
            // fall through
          case 341: break;
          case 159: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.THREE_OPERATOR;
            } 
            // fall through
          case 342: break;
          case 160: 
            { /* Does NOT return to CALL_MAYBE because heredocs aren't valid
                                                         relative identifiers.  This clause is only here to prevent a
                                                         prefix match on {QUOTE_PROMOTER}. */
                                                      handleInLastState();
            } 
            // fall through
          case 343: break;
          case 161: 
            { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
            } 
            // fall through
          case 344: break;
          case 162: 
            { handleInState(GROUP_HEREDOC_END);
            } 
            // fall through
          case 345: break;
          case 163: 
            { // Similar to GROUP_HEREDOC_END's GROUP_HEREDOC_TERMINATOR rule, but...
                               if (isTerminator(yytext())) {
                                 if (isSigil()) {
                                   yybegin(SIGIL_MODIFIERS);
                                   return terminatorType();
                                 } else {
                                   org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                   yybegin(stackFrame.getLastLexicalState());
                                   return stackFrame.terminatorType();
                                 }
                               } else {
                                 /* ...returns BAD_CHARACTER instead of going to GROUP_HEREDOC_LINE_BODY when the wrong
                                    type of terminator */
                                 return TokenType.BAD_CHARACTER;
                               }
            } 
            // fall through
          case 346: break;
          case 164: 
            { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
            } 
            // fall through
          case 347: break;
          case 165: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
            } 
            // fall through
          case 348: break;
          case 166: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
            } 
            // fall through
          case 349: break;
          case 167: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.ELSE;
            } 
            // fall through
          case 350: break;
          case 168: 
            { pushAndBegin(ADDITION_OR_KEYWORD_PAIR_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.TRUE;
            } 
            // fall through
          case 351: break;
          case 169: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -3);
            { handleLastEOL();
                                                     return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 352: break;
          case 170: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.WHEN_OPERATOR;
            } 
            // fall through
          case 353: break;
          case 171: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.ELSE;
            } 
            // fall through
          case 354: break;
          case 172: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.TRUE;
            } 
            // fall through
          case 355: break;
          case 173: 
            { String groupHeredocTerminator = yytext().toString().trim();

                                             // manual lookahead pushes terminator back
                                             yypushback(3);

                                             if (isTerminator(groupHeredocTerminator)) {
                                               yybegin(GROUP_HEREDOC_END);
                                               return ElixirTypes.HEREDOC_PREFIX_WHITE_SPACE;
                                             } else {
                                               yybegin(GROUP_HEREDOC_LINE_BODY);
                                               return ElixirTypes.HEREDOC_LINE_WHITE_SPACE_TOKEN;
                                             }
            } 
            // fall through
          case 356: break;
          case 174: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.AFTER;
            } 
            // fall through
          case 357: break;
          case 175: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
            } 
            // fall through
          case 358: break;
          case 176: 
            { pushAndBegin(ADDITION_OR_KEYWORD_PAIR_OR_SUBTRACTION_OR_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.FALSE;
            } 
            // fall through
          case 359: break;
          case 177: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.CATCH;
            } 
            // fall through
          case 360: break;
          case 178: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AFTER;
            } 
            // fall through
          case 361: break;
          case 179: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.FALSE;
            } 
            // fall through
          case 362: break;
          case 180: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.CATCH;
            } 
            // fall through
          case 363: break;
          case 181: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
            } 
            // fall through
          case 364: break;
          case 182: 
            { pushAndBegin(KEYWORD_PAIR_OR_MULTILINE_WHITE_SPACE_MAYBE);
                                               return ElixirTypes.RESCUE;
            } 
            // fall through
          case 365: break;
          case 183: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.RESCUE;
            } 
            // fall through
          case 366: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
